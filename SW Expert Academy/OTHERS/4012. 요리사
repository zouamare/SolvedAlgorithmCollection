package SWEA;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class SWEA_4012_요리사 {
	static int N;
	static int[][] map;
	static int total;
	static int minDifference;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		int T = Integer.parseInt(br.readLine());
		for(int t = 1; t <= T; t++) {
			N = Integer.parseInt(br.readLine());
			map = new int[N][N];
			total = 0;
			minDifference = Integer.MAX_VALUE;
			for(int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				for(int j = 0; j < N; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
					total += map[i][j];
				}
			}
			comb(0,0,0,0,total);
			System.out.println("#"+t+" "+minDifference);
		}
	}

	private static void comb(int depth, int start, int flag, int sum, int total) {
		// TODO Auto-generated method stub
		if(depth == N/2) {
			minDifference = Math.min(minDifference, Math.abs(sum - total));
			return;
		}
		
		for(int i = start; i < N; i++) {
			if((flag & 1<<i)!=0)	continue;
			int add = 0;
			int sub = 0;
			for(int j = 0; j < N; j++) {
				sub += map[i][j] + map[j][i];
				if((flag & 1<<j)!=0)
					add += map[i][j] + map[j][i];
			}
			comb(depth+1, i+1, (flag | 1<<i), sum + add, total - sub + add);
		}
	}
}
